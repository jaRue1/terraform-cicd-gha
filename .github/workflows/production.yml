name: 'Production Terraform Plan and Apply' 
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
permissions:
    contents: read # This is required for actions/checkout
    pull-requests: write # This is required for gh bot to comment PR
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./env/production
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0


    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true


    - name: Terraform Init
      run: terraform init -input=false


    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      if: github.event_name == 'pull_request'
      continue-on-error: true

      
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
        
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve -input=false
        exit_status=$?
    
        if [ $exit_status -eq 0 ]; then
          # Increment version number
          # Example: Read version from a file
          version=$(cat VERSION)
          # Increment the version
          new_version=$(echo $version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo $new_version > VERSION
    
          # Create release
          release_title="Production Deployment $new_version"
          release_body=$(echo "#### Terraform Plan üìñ\n${process.env.PLAN}")
          gh release create "$new_version" -t "$release_title" -n "$release_body"
        else
          echo "Terraform apply failed, not creating a release."
          exit 1
        fi
    

      # need to publish a release with the version number of the infrastructure the version number should increment with each production deployment
      # it should be in the format of v0.0.1
      # the release should be published only when the terraform apply is successful
      # the release should have a title of "Production Deployment v0.0.1" and a description that includes the output of the terraform plan 

      